# CS4348 Project 3 - B-Tree Index Manager

This project implements a command-line tool for managing index files using a B-tree structure. It supports create, insert, search, print, extract, and bulk load operations. Files are block-structured and follow a strict memory usage constraint (max 3 nodes in memory).

## 📦 Requirements

* Python 3.7+

## 🛠️ How to Run

All commands follow the format:

```
python project3.py <command> <arguments>
```

## 🧪 Example Test Workflow

### 1. Create an Index File

```
python project3.py create test.idx
```

### 2. Prepare CSV File

Create a file named `input.csv` in the same directory with content:

```
15,100
10,50
20,150
25,175
5,25
30,200
1,10
8,40
18,130
22,160
```

### 3. Load Data from CSV

```
python project3.py load test.idx input.csv
```

### 4. Print All Key-Value Pairs

```
python project3.py print test.idx
```

### 5. Search for a Key

```
python project3.py search test.idx 22
python project3.py search test.idx 99  # (Should print 'Key not found.')
```

### 6. Extract to Output CSV

```
python project3.py extract test.idx output.csv
```

## 🔁 Commands Summary

* `create <indexfile>` - Create a new index file.
* `insert <indexfile> <key> <value>` - Insert a key/value.
* `search <indexfile> <key>` - Search for a key.
* `load <indexfile> <csvfile>` - Load many key/value pairs.
* `print <indexfile>` - Print all pairs.
* `extract <indexfile> <output.csv>` - Save all pairs to CSV.

## 📄 Output

* `test.idx`: Binary index file
* `output.csv`: CSV of sorted key/value pairs

---

For any issues or debugging, ensure that all files are in the same directory and valid Python is used. Contact your instructor if anything breaks beyond repair.
